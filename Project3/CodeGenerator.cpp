#include <iostream>
#include <fstream>
#include "CodeGenerator.h"
#include <iomanip>
#include <cstdlib>

using namespace std;

CodeGen::CodeGen (string filename, LexicalAnalyzer * L)
{
	lex = L;
	string cppname = filename.substr (0, filename.length()-3) + ".cpp";
	cpp.open (cppname.c_str());
	if (cpp.fail()){
		cout << cppname << " could not be opened" << endl;
		exit(1);
	}

	 cpp << "// Autogenerated Scheme to C++ Code" << endl;
	 cpp << "// File: " << cppname << endl << endl;
	 cpp << "#include <iostream>" << endl;
	 cpp << "#include \"Object.h\"" << endl;
	 cpp << "using namespace std;" << endl << endl;
}

/********************************************************************************/
/* This function will								*/
/********************************************************************************/
CodeGen::~CodeGen ()
{
	cpp.close();
}

/********************************************************************************/
/* This function will								*/
/********************************************************************************/
void CodeGen::WriteCode (string code)
{
//	for (int t = 0; t < tabs; t++)
//		cpp << '\t';
	cpp << code;
}


void CodeGen::StartFunction(string functionName, bool inMain){
	if (inMain){
		cpp << "\nint main(";
	}
	else {
		string concatenate = "";
		concatenate = concatenate + "Object " + functionName + "(";
		cpp << concatenate;
	}
}

void CodeGen::FunctionParameters(string parameter ){
	string concatenate = "";
	cpp << "Object " << parameter;
}

void CodeGen::AddComma(){
	cpp << ", ";
}

void CodeGen::ParameterEnd(){
	cpp << ")\n{" << endl;
}

void CodeGen::NewLineFunction(){
	cpp << "\tcout << endl;" << endl;
}

void CodeGen::EndFunction(bool inMain){
	if (inMain){
		cpp << "\treturn 0;" << endl;
	}
	cpp << "}" << endl;
}

void CodeGen::startIf()
{

	cpp << "if (";
}

void CodeGen::endIf()
{

	cpp << ")\n{" << endl;
}

void CodeGen::startObjectInt(int num)
{
	cpp << "Object (" << num;
}

void CodeGen::startObjectStr(string str)
{
	cpp << "Object (" << str;
}

void CodeGen::endObject()
{
	cpp << ")";
}